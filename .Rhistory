corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black")
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 0.8)
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2)
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 1.2, cl.pos = "b")
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 1.2, cl.pos = "b")
ggsave("cor.pdf")
tempt = simParaHP[,1:4]
colnames(tempt) = paras
M = cor(tempt, method = "spearman")
jpeg('cor.jpg')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 1.2, cl.pos = "b")
dev.off()
pdf('cor.pdf')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b")
dev.off()
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b", cl.cex = 1.5)
pdf('cor.pdf')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b", cl.cex = 1.2)
dev.off()
tempt = simParaHP[,1:4]
colnames(tempt) = paras
M = cor(tempt, method = "spearman")
pdf('figures/simDataAnalysis/corrplotHP.pdf')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b", cl.cex = 1.2)
dev.off()
tempt = simParaLP[,1:4]
colnames(tempt) = paras
M = cor(tempt, method = "spearman")
pdf('figures/simDataAnalysis/corrplotLP.pdf')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b", cl.cex = 1.2)
dev.off()
M
range(M)
range(M[M < 1])
tempt = simParaHP[,1:4]
colnames(tempt) = paras
M = cor(tempt, method = "spearman")
range(M[M < 1])
dim(paraComb)
matrix(rep(paraTable,nRep), ncol = 4)
matrix(rep(paraComb,nRep), ncol = 4)
mtx <- matrix(1:4, ncol = 2)
mtx.rep <- t(apply(mtx, 1, rep, r))
mtx
mtx.rep
t(apply(mtx, 1, 1, 1))
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/loadFxs.R', echo=TRUE)
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*4)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/loadFxs.R', echo=TRUE)
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*4)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
nE = length(paras) + 2
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
n = nComb
nE = length(paras)
expPara = array(NA, dim = c(nComb, nRep, nE*4))
i = 1
j = 1
expPara_ = matrix(NA, nRep, nE*5)
fileName = sprintf("genData/simModelFitting/%s/%s_s%d_r%d_summary.txt",
modelName, cond, i, r)
junk = read.csv(fileName, header = F)
expPara_ = matrix(NA, nRep, nE * 5)
r = 1
expPara_ = matrix(NA, nRep, nE*5)
fileName = sprintf("genData/simModelFitting/%s/%s_s%d_r%d_summary.txt",
modelName, cond, i, r)
junk = read.csv(fileName, header = F)
expPara_[r, 1:nE] = junk[1:nE,1]
expPara_[r, (nE + 1) : (2 * nE)] = junk[1:nE,2]
expPara_[r, (2*nE + 1) : (3 * nE)] = junk[1:nE,9]
expPara_[r, (3 * nE + 1) : (4 * nE)] = junk[1:nE,10]
nE = length(paras) + 2
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
n = nComb
nE = length(paras)
expPara = array(NA, dim = c(nComb, nRep, nE*4))
for(i in 1 : n){
expPara_ = matrix(NA, nRep, nE*5)
for(r in 1 : nRep){
fileName = sprintf("genData/simModelFitting/%s/%s_s%d_r%d_summary.txt",
modelName, cond, i, r)
junk = read.csv(fileName, header = F)
expPara_[r, 1:nE] = junk[1:nE,1]
expPara_[r, (nE + 1) : (2 * nE)] = junk[1:nE,2]
expPara_[r, (2*nE + 1) : (3 * nE)] = junk[1:nE,9]
expPara_[r, (3 * nE + 1) : (4 * nE)] = junk[1:nE,10]
}
expPara[i, ,] = expPara_
}
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*4)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
source('~/Documents/first_kick/wtw_SDG_brandNew/expParaAnalysis.R', echo=TRUE)
nE = length(paras) + 2
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
n = nComb
nE = length(paras)
expPara = array(NA, dim = c(nComb, nRep, nE*5))
modelName
paras
nE = length(paras) + 2
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
n = nComb
nE = length(paras)
expPara = array(NA, dim = c(nComb, nRep, nE*5))
expPara_ = matrix(NA, nRep, nE*5)
r = 1
fileName = sprintf("genData/simModelFitting/%s/%s_s%d_r%d_summary.txt",
modelName, cond, i, r)
junk = read.csv(fileName, header = F)
expPara_[r, 1:nE] = junk[1:nE,1]
expPara_[r, (nE + 1) : (2 * nE)] = junk[1:nE,2]
expPara_[r, (2*nE + 1) : (3 * nE)] = junk[1:nE,9]
expPara_[r, (3 * nE + 1) : (4 * nE)] = junk[1:nE,10]
nE = length(paras) + 2
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
n = nComb
nE = length(paras)
expPara = array(NA, dim = c(nComb, nRep, nE*5))
for(i in 1 : n){
expPara_ = matrix(NA, nRep, nE*5)
for(r in 1 : nRep){
fileName = sprintf("genData/simModelFitting/%s/%s_s%d_r%d_summary.txt",
modelName, cond, i, r)
junk = read.csv(fileName, header = F)
expPara_[r, 1:nE] = junk[1:nE,1]
expPara_[r, (nE + 1) : (2 * nE)] = junk[1:nE,2]
expPara_[r, (2*nE + 1) : (3 * nE)] = junk[1:nE,9]
expPara_[r, (3 * nE + 1) : (4 * nE)] = junk[1:nE,10]
}
expPara[i, ,] = expPara_
}
return(expPara)
nE = length(paras) + 2
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
n = nComb
nE = length(paras)
expPara = array(NA, dim = c(nComb, nRep, nE*5))
for(i in 1 : n){
expPara_ = matrix(NA, nRep, nE*5)
for(r in 1 : nRep){
fileName = sprintf("genData/simModelFitting/%s/%s_s%d_r%d_summary.txt",
modelName, cond, i, r)
junk = read.csv(fileName, header = F)
expPara_[r, 1:nE] = junk[1:nE,1]
expPara_[r, (nE + 1) : (2 * nE)] = junk[1:nE,2]
expPara_[r, (2*nE + 1) : (3 * nE)] = junk[1:nE,9]
expPara_[r, (3 * nE + 1) : (4 * nE)] = junk[1:nE,10]
}
expPara[i, ,] = expPara_
}
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*4)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
dim(simParaHP)
## look at corrletion
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*5)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
dim(simParaHP)
View(simParaHP)
paraTable[i,1:4]
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/loadFxs.R', echo=TRUE)
## look at corrletion
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*5)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
View(simParaHP)
expPara_[r, (3 * nE + 1) : (4 * nE)]
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/loadFxs.R', echo=TRUE)
## look at corrletion
modelName = "full_model"
paras = getParas(modelName )
nPara = length(paras)
load(sprintf("genData/simulation/%s/simParas.RData", modelName))
for(c in 1:2){
cond = conditions[c]
condColor = conditionColors[c]
simPara_ = loadSimPara_(modelName, paras, cond)
simPara = matrix(simPara_, 810, 4*5)
if(c == 1){
simParaHP = simPara
}else{
simParaLP = simPara
}
}
simPara = rbind(simParaHP, simParaLP)
View(simParaHP)
simPara = rbind(simParaHP, simParaLP)
simPara = as.data.frame(simPara)
colnames(simPara) = c(paras,  paste0(paras, "SD"), paste0(paras, "Effe"), paste0(paras, "Rhat"),
paste0(paras, "real"))
simPara$condition = rep(c("HP", "LP"), each = nrow(simParaHP))
View(simPara)
# choose only useful data
RhatCols = which(str_detect(colnames(simPara), "hat"))[1 : length(paras)]
EffeCols = which(str_detect(colnames(simPara), "Effe"))[1 : length(paras)]
simParaUse = simPara[apply(simPara[,RhatCols] < 1.1, MARGIN = 1, sum) == length(paras) &
apply(simPara[,EffeCols] >100, MARGIN = 1, sum) == length(paras), ]
plotParaPara = function(expPara, paraX, paraY){
# calculate correlations
corHP = cor.test(expPara[expPara$condition == "HP", paraX], expPara[expPara$condition == "HP", paraY], method = "spearman")
corLP = cor.test(expPara[expPara$condition == "LP", paraX], expPara[expPara$condition == "LP", paraY], method = "spearman")
rhoHP = round(corHP$estimate, 3)
rhoLP= round(corLP$estimate, 3)
pHP = round(corHP$p.value, 3)
pLP = round(corLP$p.value, 3)
textColors = c(ifelse(pHP < 0.05, "red", "blue"), ifelse(pLP < 0.05, "red", "blue"))
textData = data.frame(label = c(paste(rhoHP, "(p =", pHP, ")"), paste(rhoLP, "(p =", pLP, ")")),
condition = c("HP", "LP"))
plotData = expPara
p = ggplot(plotData, aes_string(paraX, paraY)) + geom_point() +
facet_grid(~condition)  +
geom_text(data = textData,aes(x = -Inf,y = -Inf, label = label),
hjust   = -0.2,vjust = -1,color = "blue",size = 5, fontface = 2) +
saveTheme + ylab(capitalize(paraY)) + xlab(capitalize(paraX))
print(p)
}
for(i in 1 : (nPara-1)){
paraX = paras[i]
for(j in (i+1): nPara){
paraY = paras[j]
plotParaPara(simParaUse, paraX, paraY)
fileName = sprintf("figures/simDataAnalysis/cor_%s_%s.pdf", paraX, paraY)
ggsave(fileName, width = 6, height = 4)
}
}
library("corrplot")
tempt = simParaHP[,1:4]
colnames(tempt) = paras
M = cor(tempt, method = "spearman")
pdf('figures/simDataAnalysis/corrplotHP.pdf')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b", cl.cex = 1.2)
dev.off()
tempt = simParaLP[,1:4]
colnames(tempt) = paras
M = cor(tempt, method = "spearman")
pdf('figures/simDataAnalysis/corrplotLP.pdf')
corrplot(M, method = "color", type = "upper", outline = T, tl.col = "black",
tl.cex = 2, cl.pos = "b", cl.cex = 1.2)
dev.off()
tempt = simParaUse
norw(simParaUse)
dim(simParaUse)
i = 1
para = paras[i]
realName = sprintf("real%s", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
para = paras[i]
realName = sprintf("real%s", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
para = paras[i]
realName = sprintf("real%s", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
para = paras[i]
realName = sprintf("%sreal", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
tempt = simParaUse
##### recaluclate the recover accuracy
for(i in 1 : nPara){
para = paras[i]
realName = sprintf("%sreal", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
}
tempt = simParaUse[simParaUse$condition == "HP", ]
##### recaluclate the recover accuracy
for(i in 1 : nPara){
para = paras[i]
realName = sprintf("%sreal", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
}
cond = "HP"
cond ="HP"
tempt = simParaUse[simParaUse$condition == "HP", ]
##### recaluclate the recover accuracy
for(i in 1 : nPara){
para = paras[i]
realName = sprintf("%sreal", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
}
cond ="LP"
tempt = simParaUse[simParaUse$condition == "LP", ]
##### recaluclate the recover accuracy
for(i in 1 : nPara){
para = paras[i]
realName = sprintf("%sreal", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
}
c= 1
cond = conditions[c]
condColor = conditionColors[c]
tempt = simParaUse[simParaUse$condition == "LP", ]
##### recaluclate the recover accuracy
for(i in 1 : nPara){
para = paras[i]
realName = sprintf("%sreal", para)
tempt1 = tempt %>% group_by_at(vars(realName)) %>% summarise(mu = mean(get(para)))
tempt2 = tempt %>% group_by_at(vars(realName)) %>% summarise(std = sd(get(para)))
plotData = data.frame(tempt1, std = tempt2$std)
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
if(para == "phi" || para == "gamma"){
wid = 0.01
}else if(para == "tau" ){
wid = 2
}else wid = 0.5
ggplot(plotData, aes_string(realName, "mu")) +
geom_bar(stat = "identity", fill = condColor,color = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("Phi estimation")  +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = wid) +
geom_point(aes_string(realName, realName), shape = 17, size = 5, fill = "black")
fileName = sprintf("figures/simDataAnalysis/recovery_%s_%s.pdf", cond, para)
ggsave(fileName, width = 4, height = 4)
}
