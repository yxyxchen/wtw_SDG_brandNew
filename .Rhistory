ceilling(4)
ceiling(4)
floor(4)
gamma = 0.9
nTimeStep = 16 / 0.5
vector[nTimeStep] gammaList;
for(i in 1 : nTimeStep){
gammaList[i] = gamma ^ (nTimeStep - i);
}
gammaList = vector(length(nTimeStep))
gammaList = vector(length = nTimeStep)
for(i in 1 : nTimeStep){
gammaList[i] = gamma ^ (nTimeStep - i);
}
gammaList
nTimeStep
modelName = "monteRatio"
pars = c("phi", "tau", "gamma")
# create outfiles
dir.create("genData")
dir.create("genData/expModelFitting")
dir.create(sprintf("genData/expModelFitting/%s", modelName))
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R")
load("wtwSettings.RData")
library("coda") # calculate psr in modelFittingFxs
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
getwd()
setwd(../)
setwd("../")
getwd()
# create outfiles
dir.create("genData")
dir.create("genData/expModelFitting")
dir.create(sprintf("genData/expModelFitting/%s", modelName))
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R")
load("wtwSettings.RData")
library("coda") # calculate psr in modelFittingFxs
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# create outfiles
dir.create("genData")
dir.create("genData/expModelFitting")
dir.create(sprintf("genData/expModelFitting/%s", modelName))
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R")
load("wtwSettings.RData")
library("coda") # calculate psr in modelFittingFxs
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
i = 1
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
load("genData/expDataAnalysis/blockData.RData")
idList = unique(blockData$id)
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
# delete the last trial, since the decision is interuptted
thisTrialData = thisTrialData[1 : (nrow(thisTrialData) - 1),]
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
cond = unique(thisTrialData$condition)
wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2]) # wIni is the theoratical initial values
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, thisID)
modelFitting(cond, wIni, timeWaited, trialEarnings, scheduledWait, fileName, paras, model)
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
# delete the last trial, since the decision is interuptted
thisTrialData = thisTrialData[1 : (nrow(thisTrialData) - 1),]
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
cond = unique(thisTrialData$condition)
wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2]) # wIni is the theoratical initial values
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, thisID)
source('~/Documents/first_kick/wtw_SDG_brandNew/wtwSettingEnd.R', echo=TRUE)
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/modelFittingFxs.R', echo=TRUE)
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/modelFittingFxs.R', echo=TRUE)
wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2]) # wIni is the theoratical initial values
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, thisID)
modelFitting(cond, wIni, timeWaited, trialEarnings, scheduledWait, fileName, paras, model)
tMax
load("wtwSettings.RData")
tMax = ifelse(cond == "HP", tMaxs[1], tMaxs[2])
condIdx = ifelse(cond =="HP", 1, 2)
nChain = 4
nIter = 5000
nTimeSteps = tMax / stepDuration
tMax
cond
getwd
getwd()
