timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
tIdx = 5
rewardDelay = scheduledWait[tIdx]
actionProbs = unlist(lapply(1 : nTimeStep, function(x) exp(tau * Qwait[x]) / sum(exp(Qwait * tau))))
action = sample(1:nTimeStep, size=1, replace=TRUE, prob= actionProbs) # time step to quit waiting
t = ifelse(action * stepDuration >rewardDelay, ceiling(rewardDelay / stepDuration), action)
# determine timeWaited, sellTime
getReward = action * stepDuration >= rewardDelay
nextReward = ifelse(getReward, tokenValue, 0);
trialEarnings[tIdx] = nextReward
timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
tIdx = 6
rewardDelay = scheduledWait[tIdx]
actionProbs = unlist(lapply(1 : nTimeStep, function(x) exp(tau * Qwait[x]) / sum(exp(Qwait * tau))))
action = sample(1:nTimeStep, size=1, replace=TRUE, prob= actionProbs) # time step to quit waiting
t = ifelse(action * stepDuration >rewardDelay, ceiling(rewardDelay / stepDuration), action)
# determine timeWaited, sellTime
getReward = action * stepDuration >= rewardDelay
nextReward = ifelse(getReward, tokenValue, 0);
trialEarnings[tIdx] = nextReward
timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
tIdx = 7
rewardDelay = scheduledWait[tIdx]
actionProbs = unlist(lapply(1 : nTimeStep, function(x) exp(tau * Qwait[x]) / sum(exp(Qwait * tau))))
action = sample(1:nTimeStep, size=1, replace=TRUE, prob= actionProbs) # time step to quit waiting
t = ifelse(action * stepDuration >rewardDelay, ceiling(rewardDelay / stepDuration), action)
# determine timeWaited, sellTime
getReward = action * stepDuration >= rewardDelay
nextReward = ifelse(getReward, tokenValue, 0);
trialEarnings[tIdx] = nextReward
timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
tIdx = 8
rewardDelay = scheduledWait[tIdx]
actionProbs = unlist(lapply(1 : nTimeStep, function(x) exp(tau * Qwait[x]) / sum(exp(Qwait * tau))))
action = sample(1:nTimeStep, size=1, replace=TRUE, prob= actionProbs) # time step to quit waiting
t = ifelse(action * stepDuration >rewardDelay, ceiling(rewardDelay / stepDuration), action)
# determine timeWaited, sellTime
getReward = action * stepDuration >= rewardDelay
nextReward = ifelse(getReward, tokenValue, 0);
trialEarnings[tIdx] = nextReward
timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
tIdx = 10
rewardDelay = scheduledWait[tIdx]
actionProbs = unlist(lapply(1 : nTimeStep, function(x) exp(tau * Qwait[x]) / sum(exp(Qwait * tau))))
action = sample(1:nTimeStep, size=1, replace=TRUE, prob= actionProbs) # time step to quit waiting
t = ifelse(action * stepDuration >rewardDelay, ceiling(rewardDelay / stepDuration), action)
# determine timeWaited, sellTime
getReward = action * stepDuration >= rewardDelay
nextReward = ifelse(getReward, tokenValue, 0);
trialEarnings[tIdx] = nextReward
timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
reward
reward = a
trialData = trialLPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 80
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
# actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
# plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
# p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
# print(p)
print(sum(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
trialData = trialLPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 80
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
# actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
# plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
# p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
# print(p)
print(mean(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
thisTrialData$trialEarnings
R_learning2 = function(para, cond, scheduledWait){
# parse para
phi1 = para[1]
phi2 = para[2]
tau = para[3]
QwaitIni = 0.02
rewardRateIni = 0.70
# determine number of trials
nTrial = length(scheduledWait)
wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2])
# determine parameters for this condition
tMax= ifelse(cond == "HP", tMaxs[1], tMaxs[2])
timeTicks = seq(0, tMax, by = stepDuration)
nTimeStep = tMax / stepDuration
bufferWindow = nTimeStep
# initialize action values
Qwait = seq(0, QwaitIni, length.out = nTimeStep)
rewardRate = rewardRateIni
# initialize varibles for recording
vaWaits = matrix(NA, nTimeStep, nTrial);
vaWaits[,1] = Qwait
vaRewardRates = vector(length = nTrial);
vaRewardRates[1] = rewardRate
rewardDelays = rep(0, nTrial)
# initialize totalSecs
totalSecs = 0
# initialize outputs
trialEarnings = rep(0, nTrial)
timeWaited = rep(0, nTrial)
sellTime = rep(0, nTrial)
# loop over trials
for(tIdx in 1 : nTrial) {
rewardDelay = scheduledWait[tIdx]
actionProbs = unlist(lapply(1 : nTimeStep, function(x) exp(tau * Qwait[x]) / sum(exp(Qwait * tau))))
action = sample(1:nTimeStep, size=1, replace=TRUE, prob= actionProbs) # time step to quit waiting
t = ifelse(action * stepDuration >rewardDelay, ceiling(rewardDelay / stepDuration), action)
# determine timeWaited, sellTime
getReward = action * stepDuration >= rewardDelay
nextReward = ifelse(getReward, tokenValue, 0);
trialEarnings[tIdx] = nextReward
timeWaited[tIdx] = ifelse(getReward, rewardDelay, t * stepDuration)
rewardDelays[tIdx] = rewardDelay
sellTime[tIdx] = totalSecs + ifelse(getReward, rewardDelay, timeWaited[tIdx])
# update Qwait and rewardRate
if(tIdx < nTrial){
if(nextReward > 0){
delta = (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep - rewardRate - Qwait[t : nTimeStep]
Qwait[t : nTimeStep] = Qwait[t : nTimeStep] + phi1 * delta
if(t > 1){
delta = rewardRate * (nTimeStep - 1 : (t-1)) / nTimeStep - rewardRate - Qwait[1 : (t -1)]
Qwait[1 : (t - 1)] =   Qwait[1 : (t - 1)] + phi1 * delta
}
}else{
delta =  rewardRate * (nTimeStep - 1 : t) / nTimeStep - rewardRate - Qwait[1 : t]
Qwait[1 : t] =   Qwait[1 : t] + phi1 * delta
}
rewardRate = rewardRate + (nextReward + rewardRate * (nTimeStep - t)) / nTimeStep * phi2
# track vaWaits and vaQuits
vaWaits[,tIdx + 1] = Qwait
vaRewardRates[tIdx + 1] = rewardRate
txt = sprintf("R = %d, T = %d", nextReward, t)
plotData = data.frame(time = 1 : nTimeStep, Qwait = Qwait)
ggplot(plotData, aes(time, Qwait)) + geom_point() + ggtitle(txt)
}# end of the update
} # end of all trials
outputs = list(
"trialNum" = 1 : nTrial,
"trialEarnings" = trialEarnings,
"timeWaited" = timeWaited,
"sellTime" = sellTime, # used in wtw analysis
"scheduledWait" = rewardDelays,
"vaWaits" = vaWaits,
"vaRewardRates" = vaRewardRates
)
return(outputs)
} #end of the function
source('~/Documents/first_kick/wtw_SDG_brandNew/simulation.R', echo=TRUE)
modelName = "R_learning2"
nBlock = 1
nRep = 10
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
simulate(modelName, nBlock, nRep, paraTable)
#
library("ggplot2")
library("Hmisc")
source("subFxs/analysisFxs.R")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
load("wtwSettings.RData")
modelName = "R_learning2"
dir.create("figures/simDataAnalysis")
dirName = sprintf("genData/simulation/%s", modelName)
load(sprintf("%s/trialHPData.RData", dirName))
load(sprintf("%s/trialLPData.RData", dirName))
load(sprintf("%s/simParas.RData", dirName))
source("subFxs/plotThemes.R")
dir.create("figures/simDataAnalysis")
dirName = sprintf("figures/simDataAnalysis/%s", modelName)
dir.create(dirName)
for(c in 1 : 2){
cond = conditions[c]
if(cond == "HP") trialData = trialHPData else trialData = trialLPData
tMax = ifelse(cond == "HP", tMaxs[1], tMaxs[2])
# calculate AUC and timeWaited
plotKMSC = F
label = ""
kmGrid = seq(0, tMax, by=0.1)
# initialize
totalEarnings_ = matrix(0, nComb, nRep)
AUC_ = matrix(0, nComb, nRep)
for(sIdx in 1 : nComb){
for(rIdx in 1 : nRep){
thisTrialData = trialData[[simNo[sIdx, rIdx]]]
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC_[sIdx, rIdx] = kmscResults[['auc']]
}
}
AUC = apply(AUC_, MARGIN = 1, FUN = mean)
if(cond == "HP") AUCHP = AUC else AUCLP = AUC
}
paras = getParas("R_learning2")
nPara = length(paras)
for(c in 1 : 2){
cond = conditions[c]
condColor = conditionColors[c]
ylimit = ifelse(cond == "HP", 25, 45)
if(cond == "HP") AUC = AUCHP else AUC = AUCLP
tempt = data.frame(paraComb, AUC = AUC)
for(i in 1 : nPara){
para = paras[i]
tempt1 = tempt %>% group_by_at(vars(para)) %>% summarise(mu = mean(AUC))
tempt2 = tempt %>% group_by_at(vars(para)) %>% summarise(std = sd(AUC))
plotData = data.frame(tempt1, std = tempt2$std)
plotData[[para]]= as.factor(plotData[[para]])
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
ggplot(plotData, aes_string(para, "mu")) +
geom_bar(stat = "identity", color = condColor, fill = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("AUC / min") + ylim(c(-3, ylimit)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2)
fileName = sprintf("figures/simDataAnalysis/%s/AUC_%s_%s.pdf", modelName, cond, para)
ggsave(fileName, width = 3, height = 4)
}
}
trialData = trialLPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 80
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
# actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
# plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
# p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
# print(p)
print(mean(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
# look at actions
trialData = trialLPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 80
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
# plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
# p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
# print(p)
#print(mean(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
4.4 / 4
4.5 / 4
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/repetitionFxs.R', echo=TRUE)
modelName = "R_learning2"
nBlock = 1
nRep = 10
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
simulate(modelName, nBlock, nRep, paraTable)
#
library("ggplot2")
library("Hmisc")
source("subFxs/analysisFxs.R")
source("subFxs/helpFxs.R")
source("subFxs/loadFxs.R")
load("wtwSettings.RData")
modelName = "R_learning2"
dir.create("figures/simDataAnalysis")
dirName = sprintf("genData/simulation/%s", modelName)
load(sprintf("%s/trialHPData.RData", dirName))
load(sprintf("%s/trialLPData.RData", dirName))
load(sprintf("%s/simParas.RData", dirName))
source("subFxs/plotThemes.R")
dir.create("figures/simDataAnalysis")
dirName = sprintf("figures/simDataAnalysis/%s", modelName)
dir.create(dirName)
for(c in 1 : 2){
cond = conditions[c]
if(cond == "HP") trialData = trialHPData else trialData = trialLPData
tMax = ifelse(cond == "HP", tMaxs[1], tMaxs[2])
# calculate AUC and timeWaited
plotKMSC = F
label = ""
kmGrid = seq(0, tMax, by=0.1)
# initialize
totalEarnings_ = matrix(0, nComb, nRep)
AUC_ = matrix(0, nComb, nRep)
for(sIdx in 1 : nComb){
for(rIdx in 1 : nRep){
thisTrialData = trialData[[simNo[sIdx, rIdx]]]
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC_[sIdx, rIdx] = kmscResults[['auc']]
}
}
AUC = apply(AUC_, MARGIN = 1, FUN = mean)
if(cond == "HP") AUCHP = AUC else AUCLP = AUC
}
paras = getParas("R_learning2")
nPara = length(paras)
for(c in 1 : 2){
cond = conditions[c]
condColor = conditionColors[c]
ylimit = ifelse(cond == "HP", 25, 45)
if(cond == "HP") AUC = AUCHP else AUC = AUCLP
tempt = data.frame(paraComb, AUC = AUC)
for(i in 1 : nPara){
para = paras[i]
tempt1 = tempt %>% group_by_at(vars(para)) %>% summarise(mu = mean(AUC))
tempt2 = tempt %>% group_by_at(vars(para)) %>% summarise(std = sd(AUC))
plotData = data.frame(tempt1, std = tempt2$std)
plotData[[para]]= as.factor(plotData[[para]])
plotData$ymin = plotData$mu - plotData$std
plotData$ymax = plotData$mu + plotData$std
ggplot(plotData, aes_string(para, "mu")) +
geom_bar(stat = "identity", color = condColor, fill = condColor) +
saveTheme + xlab(capitalize(para)) + ylab("AUC / min") + ylim(c(-3, ylimit)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2)
fileName = sprintf("figures/simDataAnalysis/%s/AUC_%s_%s.pdf", modelName, cond, para)
ggsave(fileName, width = 3, height = 4)
}
}
# look at actions
trialData = trialLPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 80
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
#actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
print(p)
#print(mean(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
# look at actions
trialData = trialHPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 40
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
#actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
print(p)
#print(mean(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
optimRewardRates
10 / optimWaitRate
10 / optimRewardRates$LP
optimWaitTimes
# look at actions
trialData = trialHPData
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
paraComb = getParaComb(paraTable)
nTimeStep = 40
for(i in 1 : nComb){
thisTrialData = trialData[[i]]
actionValueViewer(thisTrialData$vaWaits, thisTrialData$vaRewardRates, thisTrialData)
# plotData = data.frame(time = (1 : nTimeStep) * stepDuration, Qwait = thisTrialData$vaWaits[,50])
# p=ggplot(plotData, aes(time, Qwait)) + ggtitle(paste(paraComb[i,], collapse = " ")) + geom_point()
# print(p)
#print(mean(thisTrialData$trialEarnings / (thisTrialData$timeWaited * 2  + 4 )))
readline("continue")
}
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/repetitionFxs.R', echo=TRUE)
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/repetitionFxs.R', echo=TRUE)
modelName = "R_learning2"
nBlock = 1
nRep = 10
paraTable = data.frame(phi1 = c(0.02, 0.05, 0.08), phi2 = c(0.02, 0.05, 0.08),tau = c(5, 10, 15))
simulate(modelName, nBlock, nRep, paraTable)
