ggsave("figures/expParaAnalysis/Effe.pdf", width = 6, height = 4)
## parameter correlation
nPara = length(paras)
for(i in 1 : nPara){
paraX = paras[i]
for(j in (i+1) : nPara){
paraY = paras[j]
plotParaPara(expPara, paraX, paraY, useID)
fileName = sprintf("figures/expParaAnalysis/cor_%s_%s.pdf", paraX, paraY)
ggsave(fileName, width = 6, height = 4)
}
}
modelName = "reduce_one_QwaitIni"
paras = getParas(modelName)
expPara = loadExpPara(modelName, paras)
useID = getUseID(blockData, expPara, paras)
plotParaAUC(expPara, "phi", blockData, useID)
plotParaAUC(expPara, "QwaitIni", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "gamma", blockData, useID)
# full_model
modelName = "reduce_two_QwaitIni"
paras = getParas(modelName)
expPara = loadExpPara(modelName, paras)
useID = getUseID(blockData, expPara, paras)
plotParaAUC(expPara, "phi", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "gamma", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "phi", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "gamma", blockData, useID)
modelName = "cons_theoretic"
paras = getParas(modelName)
expPara = loadExpPara(modelName, paras)
paras
modelName = "cons_arbitrary"
paras = c("phi", "tau", "gamma")
expPara = loadExpPara(modelName, paras)
useID = getUseID(blockData, expPara, paras)
plotParaAUC(expPara, "phi", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "gamma", blockData, useID)
modelName = "cons_theoretic"
paras = c("phi", "tau", "gamma")
expPara = loadExpPara(modelName, paras)
useID = getUseID(blockData, expPara, paras)
plotParaAUC(expPara, "phi", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "gamma", blockData, useID)
wInisTheory
mean(wInisTheory)
load("/Users/cyx/Documents/first_kick/wtw_SDG_brandNew/wtwSettings.RData")
3 * (0.9) ^ 4
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/wtwSettings.R', echo=TRUE)
modelName = "cons_arbitrary"
paras = c("phi", "tau", "gamma")
dir.create("genData")
dir.create("genData/expModelFitting")
dir.create(sprintf("genData/expModelFitting/%s", modelName))
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/loadFxs.R') # for load data
source("subFxs/helpFxs.R")
load("wtwSettings.RData")
library("coda") # calculate psr in modelFittingFxs
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
# extract input arguments from no stree subjects
load("genData/expDataAnalysis/blockData.RData")
idList = unique(blockData$id)
n = length(idList)
expPara = loadExpPara("full_model", getParas("full_model"))
useID = getUseID(blockData, expPara, getParas("full_model"))
i = 1
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
cond = unique(thisTrialData$condition)
wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2]) # wIni is the theoratical initial values
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, thisID)
modelFitting(cond, wIni, timeWaited, trialEarnings, scheduledWait, fileName, paras, model)
}
for(i in 2 : n){
thisID = idList[[i]]
thisTrialData = trialData[[thisID]]
thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
timeWaited = thisTrialData$timeWaited
scheduledWait = thisTrialData$scheduledWait
trialEarnings = thisTrialData$trialEarnings
timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
cond = unique(thisTrialData$condition)
wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2]) # wIni is the theoratical initial values
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, thisID)
modelFitting(cond, wIni, timeWaited, trialEarnings, scheduledWait, fileName, paras, model)
}
# for(i in 1 : n){
#   thisID = idList[[i]]
#   thisTrialData = trialData[[thisID]]
#   thisTrialData = thisTrialData[thisTrialData$blockNum == 1,]
#   timeWaited = thisTrialData$timeWaited
#   scheduledWait = thisTrialData$scheduledWait
#   trialEarnings = thisTrialData$trialEarnings
#   timeWaited[trialEarnings > 0] = scheduledWait[trialEarnings > 0]
#   cond = unique(thisTrialData$condition)
#   wIni = ifelse(cond == "HP", wInisTheory[1], wInisTheory[2]) # wIni is the theoratical initial values
#   # load paras in the full_model
#   nE = length(getParas("full_model"))
#   expParaMedian = vector(length = nE)
#   fileName = sprintf("genData/expModelFitting/%s/s%d.txt", "full_model", thisID)
#   junk = read.csv(fileName, header = F)
#   expParaMedian  = apply(junk[,1:nE], MARGIN = 2, median)
#
#   # fitting
#   fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, thisID)
#   modelFittingNo(cond, wIni, timeWaited, trialEarnings, scheduledWait, fileName, paras, model, expParaMedian)
# }
library("ggplot2")
library(stringr)
source("subFxs/plotThemes.R")
load("genData/expDataAnalysis/blockData.RData")
source("subFxs/taskFxs.R") # used in repetition
source("subFxs/repetitionFxs.R")
source("subFxs/analysisFxs.R") # for analysis
load("wtwSettings.RData") # used in repetition
source("subFxs/loadFxs.R") #
load("wtwSettings.RData")
load("genData/expDataAnalysis/kmOnGrid.RData")
source("subFxs/helpFxs.R")
# inputs
modelName = "cons_theoretic"
pars = c("phi", "tau", "gamma")
# load expPara
expPara = loadExpPara(modelName, pars)
#tempt= loadExpParaExtra(modelName, pars)
#expParaMode = tempt$expParaMode
#expParaMedian = tempt$expParaMedian
idList = unique(blockData$id)
n = length(idList)
RhatCols = which(str_detect(colnames(expPara), "hat"))[1 : length(pars)]
EffeCols = which(str_detect(colnames(expPara), "Effe"))[1 : length(pars)]
useID = idList[apply(expPara[,RhatCols] < 1.1, MARGIN = 1, sum) == length(pars) &
apply(expPara[,EffeCols] >100, MARGIN = 1, sum) == length(pars)]
# load raw data
allData = loadAllData()
hdrData = allData$hdrData
allIDs = hdrData$ID
expTrialData = allData$trialData
n = length(idList)
set.seed(231)
repModelFun = getRepModelFun(modelName)
nRep = 10# number of repetitions
trialData = vector(length = n * nRep, mode ='list')
repNo = matrix(1 : (n * nRep), nrow = n, ncol = nRep)
# simDist_ =  vector(mode = "list", length = length(useID))
# simDistSd_ =  vector(mode = "list", length = length(useID))
for(sIdx in 1 : n){
id = idList[[sIdx]]
#para = as.double(expPara[sIdx, 1 : length(pars)])
paraList = read.table(sprintf("genData/expModelFitting/%s/s%d.txt", modelName, id),sep = ",", row.names = NULL)
cond = unique(blockData$condition[blockData$id == id])
thisExpTrialData = expTrialData[[id]]
thisExpTrialData = thisExpTrialData[thisExpTrialData$blockNum ==1, ]
scheduledWait = thisExpTrialData$scheduledWait
for(rIdx in 1 : nRep){
para = as.double(paraList[sample(1 : nrow(paraList), 1), 1 : length(pars)])
tempt = repModelFun(para, cond, scheduledWait)
trialData[[repNo[sIdx, rIdx]]] = tempt
# simDistMatrix[,rIdx] = abs(tempt$timeWaited - thisExpTrialData$timeWaited)
}
# simDist_[[sIdx]] = apply(simDistMatrix, 1, mean)
# simDistSd_[[sIdx]] = apply(simDistMatrix, 1, sd)
}
# calculate AUC and timeWaited
plotKMSC = F
# initialize
totalEarningsRep_ = matrix(0, n, nRep)
AUCRep_ = matrix(0, n, nRep)
timeWaitedRep_ = vector(mode = "list", length = n)
timeWaitedRepSd_ = vector(mode = "list", length = n)
kmOnGridRep_ = vector(mode = "list", length = n)
kmOnGridRepSd_ = vector(mode = "list", length = n)
for(sIdx in 1 : n){
id = idList[[sIdx]]
thisExpTrialData = expTrialData[[id]]
thisExpTrialData = thisExpTrialData[thisExpTrialData$blockNum ==1, ]
tMax = ifelse( unique(thisExpTrialData$condition) == "HP", tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1)
label = "asda"
nTrial = nrow(thisExpTrialData)
# initialize
timeWaitedMatrix = matrix(0, nTrial, nRep)
kmOnGridMatrix = matrix(0, length(kmGrid), nRep)
for(rIdx in 1 : nRep){
thisTrialData = trialData[[repNo[sIdx, rIdx]]]
junk = thisTrialData$timeWaited
timeWaitedMatrix[,rIdx] = junk
totalEarningsRep_[sIdx, rIdx] =  sum(thisTrialData$trialEarnings)
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUCRep_[sIdx, rIdx] = kmscResults[['auc']]
kmOnGridMatrix[,rIdx] = kmscResults$kmOnGrid
}
timeWaitedRep_[[sIdx]] = apply(timeWaitedMatrix, MARGIN = 1, mean)
timeWaitedRepSd_[[sIdx]] = apply(timeWaitedMatrix, MARGIN = 1, sd)
kmOnGridRep_[[sIdx]] = apply(kmOnGridMatrix, MARGIN = 1, mean)
kmOnGridRepSd_[[sIdx]] = apply(kmOnGridMatrix, MARGIN = 1, sd)
}
# AUC prediction
plotData = blockData[blockData$blockNum == 1,]
plotData$AUCRep = apply(AUCRep_, MARGIN = 1, FUN = mean)
plotData$AUCRepSd = apply(AUCRep_, MARGIN = 1, FUN = sd)
plotData$AUCRepMin = plotData$AUCRep - plotData$AUCRepSd
plotData$AUCRepMax = plotData$AUCRep + plotData$AUCRepSd
AUCSummary = plotData
ggplot(plotData[plotData$id %in% useID, ],
aes(AUC, AUCRep)) +  geom_errorbar(aes(ymin = AUCRepMin, ymax = AUCRepMax), color = "grey")  + geom_point() + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 45)) + ylim(c(-2, 45)) +
ylab("Predicted AUC / min") + xlab("AUC / min")
fileName = sprintf("figures/expModelRepitation/AUC_AUCRep_%s.pdf", modelName)
modelName = "cons_arbitrary"
# inputs
modelName = "cons_theoretic"
pars = getParas(modelName)
# load expPara
expPara = loadExpPara(modelName, pars)
#tempt= loadExpParaExtra(modelName, pars)
#expParaMode = tempt$expParaMode
#expParaMedian = tempt$expParaMedian
idList = unique(blockData$id)
n = length(idList)
RhatCols = which(str_detect(colnames(expPara), "hat"))[1 : length(pars)]
EffeCols = which(str_detect(colnames(expPara), "Effe"))[1 : length(pars)]
useID = idList[apply(expPara[,RhatCols] < 1.1, MARGIN = 1, sum) == length(pars) &
apply(expPara[,EffeCols] >100, MARGIN = 1, sum) == length(pars)]
modelName = "cons_arbitrary"
pars = c("phi", "tau", "gamma")
expPara = loadExpPara(modelName, pars)
#tempt= loadExpParaExtra(modelName, pars)
#expParaMode = tempt$expParaMode
#expParaMedian = tempt$expParaMedian
idList = unique(blockData$id)
n = length(idList)
RhatCols = which(str_detect(colnames(expPara), "hat"))[1 : length(pars)]
EffeCols = which(str_detect(colnames(expPara), "Effe"))[1 : length(pars)]
useID = idList[apply(expPara[,RhatCols] < 1.1, MARGIN = 1, sum) == length(pars) &
apply(expPara[,EffeCols] >100, MARGIN = 1, sum) == length(pars)]
# load raw data
allData = loadAllData()
hdrData = allData$hdrData
allIDs = hdrData$ID
expTrialData = allData$trialData
n = length(idList)
# simluation
set.seed(231)
repModelFun = getRepModelFun(modelName)
nRep = 10# number of repetitions
trialData = vector(length = n * nRep, mode ='list')
repNo = matrix(1 : (n * nRep), nrow = n, ncol = nRep)
# simDist_ =  vector(mode = "list", length = length(useID))
# simDistSd_ =  vector(mode = "list", length = length(useID))
for(sIdx in 1 : n){
id = idList[[sIdx]]
#para = as.double(expPara[sIdx, 1 : length(pars)])
paraList = read.table(sprintf("genData/expModelFitting/%s/s%d.txt", modelName, id),sep = ",", row.names = NULL)
cond = unique(blockData$condition[blockData$id == id])
thisExpTrialData = expTrialData[[id]]
thisExpTrialData = thisExpTrialData[thisExpTrialData$blockNum ==1, ]
scheduledWait = thisExpTrialData$scheduledWait
for(rIdx in 1 : nRep){
para = as.double(paraList[sample(1 : nrow(paraList), 1), 1 : length(pars)])
tempt = repModelFun(para, cond, scheduledWait)
trialData[[repNo[sIdx, rIdx]]] = tempt
# simDistMatrix[,rIdx] = abs(tempt$timeWaited - thisExpTrialData$timeWaited)
}
# simDist_[[sIdx]] = apply(simDistMatrix, 1, mean)
# simDistSd_[[sIdx]] = apply(simDistMatrix, 1, sd)
}
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/repetitionFxs.R', echo=TRUE)
# simluation
set.seed(231)
repModelFun = getRepModelFun(modelName)
nRep = 10# number of repetitions
trialData = vector(length = n * nRep, mode ='list')
repNo = matrix(1 : (n * nRep), nrow = n, ncol = nRep)
# simDist_ =  vector(mode = "list", length = length(useID))
# simDistSd_ =  vector(mode = "list", length = length(useID))
for(sIdx in 1 : n){
id = idList[[sIdx]]
#para = as.double(expPara[sIdx, 1 : length(pars)])
paraList = read.table(sprintf("genData/expModelFitting/%s/s%d.txt", modelName, id),sep = ",", row.names = NULL)
cond = unique(blockData$condition[blockData$id == id])
thisExpTrialData = expTrialData[[id]]
thisExpTrialData = thisExpTrialData[thisExpTrialData$blockNum ==1, ]
scheduledWait = thisExpTrialData$scheduledWait
for(rIdx in 1 : nRep){
para = as.double(paraList[sample(1 : nrow(paraList), 1), 1 : length(pars)])
tempt = repModelFun(para, cond, scheduledWait)
trialData[[repNo[sIdx, rIdx]]] = tempt
# simDistMatrix[,rIdx] = abs(tempt$timeWaited - thisExpTrialData$timeWaited)
}
# simDist_[[sIdx]] = apply(simDistMatrix, 1, mean)
# simDistSd_[[sIdx]] = apply(simDistMatrix, 1, sd)
}
# be careful to always to use id in code, instead of expTrialData
library("ggplot2")
library(stringr)
source("subFxs/plotThemes.R")
load("genData/expDataAnalysis/blockData.RData")
source("subFxs/taskFxs.R") # used in repetition
source("subFxs/repetitionFxs.R")
source("subFxs/analysisFxs.R") # for analysis
load("wtwSettings.RData") # used in repetition
source("subFxs/loadFxs.R") #
load("wtwSettings.RData")
load("genData/expDataAnalysis/kmOnGrid.RData")
source("subFxs/helpFxs.R")
# simluation
set.seed(231)
repModelFun = getRepModelFun(modelName)
modelName
if(modelName == "full_model"){
repModelFun = full_model
}else if(modelName == "reduce_one_QwaitIni"){
repModelFun = reduce_one_QwaitIni
}else if(modelName == "reduce_two_QwaitIni"){
repModelFun = reduce_Qwait_Ini
}else if(modelName == "reduce_one_phi"){
repModelFun = reduce_one_phi
}else if(modelName == "reduce_one_gamma"){
repModelFun == reduce_one_gamma
}else if(modelName == "cons_arbitrary"){
repModelFun == cons_arbitrary
}else{
return("wrong model name!")
}
modelName == "cons_arbitrary"
modelName
getRepModelFun(modelName)
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/repetitionFxs.R', echo=TRUE)
# simluation
set.seed(231)
repModelFun = getRepModelFun(modelName)
source('~/Documents/first_kick/wtw_SDG_brandNew/subFxs/repetitionFxs.R', echo=TRUE)
# simluation
set.seed(231)
repModelFun = getRepModelFun(modelName)
nRep = 10# number of repetitions
trialData = vector(length = n * nRep, mode ='list')
repNo = matrix(1 : (n * nRep), nrow = n, ncol = nRep)
# simDist_ =  vector(mode = "list", length = length(useID))
# simDistSd_ =  vector(mode = "list", length = length(useID))
for(sIdx in 1 : n){
id = idList[[sIdx]]
#para = as.double(expPara[sIdx, 1 : length(pars)])
paraList = read.table(sprintf("genData/expModelFitting/%s/s%d.txt", modelName, id),sep = ",", row.names = NULL)
cond = unique(blockData$condition[blockData$id == id])
thisExpTrialData = expTrialData[[id]]
thisExpTrialData = thisExpTrialData[thisExpTrialData$blockNum ==1, ]
scheduledWait = thisExpTrialData$scheduledWait
for(rIdx in 1 : nRep){
para = as.double(paraList[sample(1 : nrow(paraList), 1), 1 : length(pars)])
tempt = repModelFun(para, cond, scheduledWait)
trialData[[repNo[sIdx, rIdx]]] = tempt
# simDistMatrix[,rIdx] = abs(tempt$timeWaited - thisExpTrialData$timeWaited)
}
# simDist_[[sIdx]] = apply(simDistMatrix, 1, mean)
# simDistSd_[[sIdx]] = apply(simDistMatrix, 1, sd)
}
# calculate AUC and timeWaited
plotKMSC = F
# initialize
totalEarningsRep_ = matrix(0, n, nRep)
AUCRep_ = matrix(0, n, nRep)
timeWaitedRep_ = vector(mode = "list", length = n)
timeWaitedRepSd_ = vector(mode = "list", length = n)
kmOnGridRep_ = vector(mode = "list", length = n)
kmOnGridRepSd_ = vector(mode = "list", length = n)
for(sIdx in 1 : n){
id = idList[[sIdx]]
thisExpTrialData = expTrialData[[id]]
thisExpTrialData = thisExpTrialData[thisExpTrialData$blockNum ==1, ]
tMax = ifelse( unique(thisExpTrialData$condition) == "HP", tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1)
label = "asda"
nTrial = nrow(thisExpTrialData)
# initialize
timeWaitedMatrix = matrix(0, nTrial, nRep)
kmOnGridMatrix = matrix(0, length(kmGrid), nRep)
for(rIdx in 1 : nRep){
thisTrialData = trialData[[repNo[sIdx, rIdx]]]
junk = thisTrialData$timeWaited
timeWaitedMatrix[,rIdx] = junk
totalEarningsRep_[sIdx, rIdx] =  sum(thisTrialData$trialEarnings)
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUCRep_[sIdx, rIdx] = kmscResults[['auc']]
kmOnGridMatrix[,rIdx] = kmscResults$kmOnGrid
}
timeWaitedRep_[[sIdx]] = apply(timeWaitedMatrix, MARGIN = 1, mean)
timeWaitedRepSd_[[sIdx]] = apply(timeWaitedMatrix, MARGIN = 1, sd)
kmOnGridRep_[[sIdx]] = apply(kmOnGridMatrix, MARGIN = 1, mean)
kmOnGridRepSd_[[sIdx]] = apply(kmOnGridMatrix, MARGIN = 1, sd)
}
# AUC prediction
plotData = blockData[blockData$blockNum == 1,]
plotData$AUCRep = apply(AUCRep_, MARGIN = 1, FUN = mean)
plotData$AUCRepSd = apply(AUCRep_, MARGIN = 1, FUN = sd)
plotData$AUCRepMin = plotData$AUCRep - plotData$AUCRepSd
plotData$AUCRepMax = plotData$AUCRep + plotData$AUCRepSd
AUCSummary = plotData
ggplot(plotData[plotData$id %in% useID, ],
aes(AUC, AUCRep)) +  geom_errorbar(aes(ymin = AUCRepMin, ymax = AUCRepMax), color = "grey")  + geom_point() + facet_grid(~condition) +
geom_abline(slope = 1, intercept = 0) + saveTheme + xlim(c(-2, 45)) + ylim(c(-2, 45)) +
ylab("Predicted AUC / min") + xlab("AUC / min")
fileName = sprintf("figures/expModelRepitation/AUC_AUCRep_%s.pdf", modelName)
modelName = "cons_arbitrary"
paras = c("phi", "tau", "gamma")
expPara = loadExpPara(modelName, paras)
useID = getUseID(blockData, expPara, paras)
plotParaAUC(expPara, "phi", blockData, useID)
library("ggplot2")
source("subFxs/plotThemes.R")
source("subFxs/loadFxs.R")
source("subFxs/helpFxs.R")
library("dplyr")
library("Hmisc")
load("wtwSettings.RData")
# load experimental data
load("genData/expDataAnalysis/blockData.RData")
blockData = blockData[blockData$blockNum == 1,]
idList = unique(blockData$id)
n = length(idList)
plotParaAUC = function(expPara, paraName, blockData, useID){
paraColor = paraColors[[paraName]]
# subset data
expPara = expPara[(expPara$id %in% useID),]
blockData = blockData[(blockData$id %in% useID),]
# construct AUCRank
expPara$AUC = blockData$AUC
tempt = blockData %>% group_by(condition) %>% mutate(AUCRank = rank(AUC))
expPara$AUCRank = tempt$AUCRank
# construct paraRank
rankName = sprintf("%sRank", paraName)
expParaHP =expPara[expPara$condition == "HP", ]
expParaHP[[rankName]] = rank(expParaHP[,paraName])
expParaLP =expPara[expPara$condition == "LP", ]
expParaLP[[rankName]] = rank(expParaLP[,paraName])
tempt = rbind(expParaLP, expParaHP)
junk = lapply(1 : nrow(expPara), function(i) tempt[tempt$id == expPara$id[i],rankName])
expPara[[rankName]] = junk
# calculate correlations
corHP = cor.test(expPara[expPara$condition == "HP", paraName], expPara[expPara$condition == "HP",]$AUC, method = "spearman")
corLP = cor.test(expPara[expPara$condition == "LP", paraName], expPara[expPara$condition == "LP",]$AUC, method = "spearman")
rhoHP = round(corHP$estimate, 3)
rhoLP= round(corLP$estimate, 3)
pHP = round(corHP$p.value, 3)
pLP = round(corLP$p.value, 3)
textColors = c(ifelse(pHP < 0.05, "red", "blue"), ifelse(pLP < 0.05, "red", "blue"))
textData = data.frame(label = c(paste(rhoHP, "(p =", pHP, ")"), paste(rhoLP, "(p =", pLP, ")")),
condition = c("HP", "LP"), color = textColors)
plotData = expPara
plotData[,rankName] = unlist(plotData[,rankName])
p = ggplot(plotData, aes_string(paraName, "AUCRank")) + geom_point(size = 4, color = paraColor, fill = paraColor) +
facet_grid(~condition)  +
geom_text(data = textData,aes(x = -Inf,y = -Inf, label = label),
hjust   = -0.2,vjust = -1,color = "blue",size = 5, fontface = 2, color = textColors) + saveTheme  +
ylim(c(-8, 68)) + ylab("AUC rank") + xlab(capitalize(paraName))
print(p)
}
plotParaPara = function(expPara, paraX, paraY, useID){
expPara = expPara[expPara$id %in% useID,]
# calculate correlations
corHP = cor.test(expPara[expPara$condition == "HP", paraX], expPara[expPara$condition == "HP", paraY], method = "spearman")
corLP = cor.test(expPara[expPara$condition == "LP", paraX], expPara[expPara$condition == "LP", paraY], method = "spearman")
rhoHP = round(corHP$estimate, 3)
rhoLP= round(corLP$estimate, 3)
pHP = round(corHP$p.value, 3)
pLP = round(corLP$p.value, 3)
textColors = c(ifelse(pHP < 0.05, "red", "blue"), ifelse(pLP < 0.05, "red", "blue"))
textData = data.frame(label = c(paste(rhoHP, "(p =", pHP, ")"), paste(rhoLP, "(p =", pLP, ")")),
condition = c("HP", "LP"))
plotData = expPara
p = ggplot(plotData, aes_string(paraX, paraY)) + geom_point() +
facet_grid(~condition)  +
geom_text(data = textData,aes(x = -Inf,y = -Inf, label = label),
hjust   = -0.2,vjust = -1,color = "blue",size = 5, fontface = 2) +
saveTheme + ylab(capitalize(paraY)) + xlab(capitalize(paraX))
print(p)
}
expPara = loadExpPara(modelName, paras)
useID = getUseID(blockData, expPara, paras)
plotParaAUC(expPara, "phi", blockData, useID)
plotParaAUC(expPara, "tau", blockData, useID)
plotParaAUC(expPara, "gamma", blockData, useID)
